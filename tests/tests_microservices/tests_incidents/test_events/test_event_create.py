# import pytest
# import time
# from tests_microservices.utils.incidents.events_api import EventsAPI
# from tests_microservices.utils.incidents.events_schemas import (
#     VALID_EVENT_DATA, 
#     MINIMAL_EVENT_DATA,
#     EVENT_RESPONSE_SCHEMA,
#     EVENT_DATA_SCHEMA,
#     EVENT_STATUS_CODES,
#     MAX_EVENT_RESPONSE_TIME
# )
# from tests_microservices.checking import Checking

# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
# created_event_ids = []

# @pytest.mark.detailed
# @pytest.mark.regression
# class TestEventCreate:
#     """–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –ò–ó–ë–´–¢–û–ß–ù–´–ï –¢–ï–°–¢–´"""

#     def teardown_method(self):
#         """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
#         global created_event_ids
#         for event_id in created_event_ids:
#             try:
#                 EventsAPI.delete_event(event_id)
#                 print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å ID: {event_id}")
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
#         created_event_ids.clear()
    
#     # def test_create_event_with_full_data(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –î–£–ë–õ–ò–ö–ê–¢ —Å basic"""
#     #     start_time = time.time()
#     #     response = EventsAPI.create_event(VALID_EVENT_DATA)
#     #     response_time = (time.time() - start_time) * 1000
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #     assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 –∏–ª–∏ 200, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
#     #     Checking.check_response_time(response, MAX_EVENT_RESPONSE_TIME)
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
#     #     json_data = response.json()
#     #     Checking.check_json_token(response, ['success', 'data'])
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
#     #     assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
#     #     event_data = json_data['data']
#     #     assert event_data['name'] == VALID_EVENT_DATA['name'], "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
#     #     assert 'id' in event_data, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
#     #     assert isinstance(event_data['id'], int), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
#     #     
#     #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
#     #     created_event_ids.append(event_data['id'])
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –¥–∞–Ω–Ω—ã—Ö
#     #     Checking.check_json_schema(response, EVENT_DATA_SCHEMA)
#     #     
#     #     print(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. ID: {event_data['id']}, –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}ms")
    
#     # def test_create_event_with_minimal_data(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –î–£–ë–õ–ò–ö–ê–¢ —Å basic"""
#     #     response = EventsAPI.create_event(MINIMAL_EVENT_DATA)
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #     assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 –∏–ª–∏ 200, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
#     #     json_data = response.json()
#     #     assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
#     #     event_data = json_data['data']
#     #     assert event_data['name'] == MINIMAL_EVENT_DATA['name'], "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
#     #     
#     #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
#     #     created_event_ids.append(event_data['id'])
#     #     
#     #     print(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–æ. ID: {event_data['id']}")
    
#     # def test_create_event_with_special_characters(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - –ò–ó–ë–´–¢–û–ß–ù–´–ô"""
#     #     test_data = MINIMAL_EVENT_DATA.copy()
#     #     test_data['name'] = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()_+-=[]{}|;':\",./<>?"
#     #     
#     #     response = EventsAPI.create_event(test_data)
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #     assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 –∏–ª–∏ 200, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
#     #     
#     #     json_data = response.json()
#     #     assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #     assert json_data['data']['name'] == test_data['name'], "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
#     #     
#     #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
#     #     created_event_ids.append(json_data['data']['id'])
#     #     
#     #     print(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ. ID: {json_data['data']['id']}")
    
#     # def test_create_event_with_long_names(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ - –ò–ó–ë–´–¢–û–ß–ù–´–ô"""
#     #     long_names = [
#     #         "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã",
#     #         "A" * 100,  # 100 —Å–∏–º–≤–æ–ª–æ–≤ A
#     #         "–¢–µ—Å—Ç" * 25  # 100 —Å–∏–º–≤–æ–ª–æ–≤ "–¢–µ—Å—Ç"
#     #     ]
#     #     
#     #     for name in long_names:
#     #         test_data = MINIMAL_EVENT_DATA.copy()
#     #         test_data['name'] = name
#     #         
#     #         response = EventsAPI.create_event(test_data)
#     #         
#     #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #         assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"], EVENT_STATUS_CODES["BAD_REQUEST"]), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"
#     #         
#     #         if response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]):
#     #             json_data = response.json()
#     #             assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #             created_event_ids.append(json_data['data']['id'])
#     #             print(f"–î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{name[:30]}...' —Å–æ–∑–¥–∞–Ω–æ. ID: {json_data['data']['id']}")
#     #         else:
#     #             print(f"–î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{name[:30]}...' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
    
#     # def test_create_event_with_numbers(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —á–∏—Å–ª–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - –ò–ó–ë–´–¢–û–ß–ù–´–ô"""
#     #     test_data = MINIMAL_EVENT_DATA.copy()
#     #     test_data['name'] = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ 2025 ‚Ññ123"
#     #     
#     #     response = EventsAPI.create_event(test_data)
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #     assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 –∏–ª–∏ 200, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
#     #     
#     #     json_data = response.json()
#     #     assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #     assert json_data['data']['name'] == test_data['name'], "–ù–∞–∑–≤–∞–Ω–∏–µ —Å —á–∏—Å–ª–∞–º–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
#     #     
#     #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
#     #     created_event_ids.append(json_data['data']['id'])
#     #     
#     #     print(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —á–∏—Å–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ. ID: {json_data['data']['id']}")
    
#     # def test_create_event_with_unicode(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ - –ò–ó–ë–´–¢–û–ß–ù–´–ô"""
#     #     test_data = MINIMAL_EVENT_DATA.copy()
#     #     test_data['name'] = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —ç–º–æ–¥–∑–∏ üéâüéäüéà –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"
#     #     
#     #     response = EventsAPI.create_event(test_data)
#     #     
#     #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
#     #     assert response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201 –∏–ª–∏ 200, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
#     #     
#     #     json_data = response.json()
#     #     assert json_data['success'] is True, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
#     #     assert json_data['data']['name'] == test_data['name'], "–ù–∞–∑–≤–∞–Ω–∏–µ —Å Unicode –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
#     #     
#     #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
#     #     created_event_ids.append(json_data['data']['id'])
#     #     
#     #     print(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å Unicode —Å–æ–∑–¥–∞–Ω–æ. ID: {json_data['data']['id']}")
    
#     # def test_create_multiple_events(self):
#     #     """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –ò–ó–ë–´–¢–û–ß–ù–´–ô"""
#     #     events_to_create = 5
#     #     created_count = 0
#     #     
#     #     for i in range(events_to_create):
#     #         test_data = MINIMAL_EVENT_DATA.copy()
#     #         test_data['name'] = f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {i+1}"
#     #         
#     #         response = EventsAPI.create_event(test_data)
#     #         
#     #         if response.status_code in (EVENT_STATUS_CODES["CREATED"], EVENT_STATUS_CODES["OK"]):
#     #             json_data = response.json()
#     #             if json_data['success'] is True:
#     #                 created_event_ids.append(json_data['data']['id'])
#     #                 created_count += 1
#     #                 print(f"–°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {i+1}. ID: {json_data['data']['id']}")
#     #         
#     #     assert created_count == events_to_create, f"–°–æ–∑–¥–∞–Ω–æ {created_count} –∏–∑ {events_to_create} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
#     #     print(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

# # –í–°–ï –¢–ï–°–¢–´ –í –≠–¢–û–ú –§–ê–ô–õ–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´ –ö–ê–ö –ò–ó–ë–´–¢–û–ß–ù–´–ï
# # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ test_event_basic.py 